CC = gcc
FLAG_C = -c
FLAG_O = -o
#ASAN = -g -O0 -fanalyzer -fsanitize=address #-fsanitize=undefined
FLAG_COV = --coverage 
FLAG_ER = -Wall -Werror -Wextra #-std=c11 -pedantic
s21_decimal_C = s21_*.c 
s21_decimal_O = s21_*.o
SUITE_CASES_C = suite_*.c
SUITE_CASES_O = suite_*.o

all: s21_decimal.a

# --- СОЗДАНИЕ БИБЛИОТЕКИ ФУНКЦИЙ ---
s21_decimal.a:
	$(CC) $(ASAN) $(FLAG_C) $(FLAG_ER) $(s21_decimal_C)
	ar rc s21_decimal.a $(s21_decimal_O)
	ranlib s21_decimal.a
# --- СОЗДАНИЕ БИБЛИОТЕКИ ТЕСТОВ И ИСПОЛНЕНИЕ ---
test: s21_decimal.a
	$(CC) $(ASAN) $(FLAG_C) $(FLAG_ER) $(SUITE_CASES_C) main.c
	ar rc suite_cases.a $(SUITE_CASES_O)
	ranlib suite_cases.a
	$(CC) $(ASAN) $(FLAG_ER) $(FLAG_COV) $(FLAG_O) tests s21_decimal.a suite_cases.a $(s21_decimal_C) main.o -lcheck
	./tests
# --- ФОРМИРОВАНИЕ ОТЧЕТА О ПОКРЫТИИ ---
gcov_report: test
	gcov s21_*.gcda	
	gcovr
	gcovr --html-details -o report.html

clean:
	-rm -f *.o *.html *.gcda *.gcno *.css *.a *.gcov *.info *.out *.cfg *.txt tests
	rm -rf a.out.dSYM

open:
	open report.html

check:
	cppcheck *.h *.c
	cp ../materials/linters/CPPLINT.cfg CPPLINT.cfg
	python3 ../materials/linters/cpplint.py --extension=c *.c *.h
#	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=RESULT_VALGRIND.txt ./tests
	CK_FORK=no leaks --atExit -- ./tests

deb:
	make clean
	gcc $(FLAG_ER) main.c s21_from_int_to_decimal.c s21_support_functions.c -g
	./a.out
